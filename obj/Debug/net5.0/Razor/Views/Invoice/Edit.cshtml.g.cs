#pragma checksum "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "41a4510f771f98c6cd3d87f6bf29cc0bfd8e3255"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Invoice_Edit), @"mvc.1.0.view", @"/Views/Invoice/Edit.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\_ViewImports.cshtml"
using InvoiceApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\_ViewImports.cshtml"
using InvoiceApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"41a4510f771f98c6cd3d87f6bf29cc0bfd8e3255", @"/Views/Invoice/Edit.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4d3bee5daa51057c3533e767f6e97e895f8e7d0d", @"/Views/_ViewImports.cshtml")]
    public class Views_Invoice_Edit : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<InvoiceApp.Models.viewmodel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
  
    ViewBag.Title = "Edit Invoice";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h2>Edit Invoice</h2>\r\n\r\n");
#nullable restore
#line 10 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
 using (Html.BeginForm())
{
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
Write(Html.ValidationSummary());

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
Write(Html.HiddenFor(model => model.invoice.Id));

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div>\r\n        <label for=\"Customer\">Customer:</label>\r\n        ");
#nullable restore
#line 18 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
   Write(Html.EditorFor(model => model.invoice.Customer, new { htmlAttributes = new { id = "Invoice_Customer" } }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n    </div>\r\n    <div>\r\n        <label for=\"InvoiceDate\">InvoiceDate:</label>\r\n        ");
#nullable restore
#line 22 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
   Write(Html.EditorFor(model => model.invoice.InvoiceDate, new { htmlAttributes = new { id = "Invoice_InvoiceDate" } }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n    </div>\r\n");
            WriteLiteral("    <table id=\"itemTable\" class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Item</th>\r\n                <th>Amount</th>\r\n                <th>Price</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n");
#nullable restore
#line 35 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
              
                int j = 0; 
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
             foreach (var invoice in @Model.invoiceiteme)
            {
                var itemid = invoice.ItemId;
                var itemprice = (Model.items.FirstOrDefault(i => i.Id == invoice.ItemId).itemprice) * invoice.Amount;
                var item = Model.items.FirstOrDefault(i => i.Id == invoice.ItemId);
                var totalitemprice = itemprice *  invoice.Amount;


#line default
#line hidden
#nullable disable
            WriteLiteral("                <tr>\r\n                    <td>\r\n                        ");
#nullable restore
#line 47 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                   Write(Html.DropDownListFor(m => m.SelectedValue, (SelectList)ViewBag.GroceryItems2, new { @id = "myDropdown-" + @j,@class = "dynamic-dropdown" }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                        <script>\r\n                            var dropdown = document.getElementById(\'myDropdown-");
#nullable restore
#line 49 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                                                                          Write(j);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
                            console.log(dropdown);
                            console.log(dropdown.options)
                            for (var i = 0; i < dropdown.options.length; i++) 
                            {
                                if (parseInt(dropdown.options[i].value) === ");
#nullable restore
#line 54 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                                                                       Write(itemid);

#line default
#line hidden
#nullable disable
            WriteLiteral(@")
                                 {
                                    dropdown.selectedIndex = i;
                                    break;
                                }
                            }

                        </script>
                    </td>
                    <td>
                        ");
#nullable restore
#line 64 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                   Write(Html.EditorFor(model => invoice.Amount, new { htmlAttributes = new { @class = "Amount", id = "Amount-"+@j } }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\"");
            BeginWriteAttribute("id", " id=\"", 2516, "\"", 2533, 2);
            WriteAttributeValue("", 2521, "ItemPrice-", 2521, 10, true);
#nullable restore
#line 67 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
WriteAttributeValue("", 2531, j, 2531, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"Price\"");
            BeginWriteAttribute("value", " value= \"", 2548, "\"", 2568, 2);
#nullable restore
#line 67 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
WriteAttributeValue("", 2557, itemprice, 2557, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 2567, "", 2568, 1, true);
            EndWriteAttribute();
            WriteLiteral(" readonly>\r\n                    </td>\r\n\r\n                </tr>\r\n");
#nullable restore
#line 71 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                j = j + 1;
            }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n        </tbody>\r\n    </table>\r\n");
            WriteLiteral("    <div>\r\n        <label for=\"TotalPrice\">TotalPrice:</label>\r\n        <input type=\"text\" id=\"TotalPrice\" class=\"form-control\"");
            BeginWriteAttribute("value", " value=\"", 2843, "\"", 2876, 1);
#nullable restore
#line 81 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
WriteAttributeValue("", 2851, Model.invoice.TotalPrice, 2851, 25, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" readonly>\r\n    </div>\r\n");
            WriteLiteral("    <button type=\"button\" id=\"SaveInvoiceButton\" >Save Changes</button>\r\n");
#nullable restore
#line 86 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 88 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
Write(Html.ActionLink("Back to List", "Index"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<style>

    .form-control 
    {
        width: 170px; 
        height: 35px; 
        font-size: 14px; 
        display: inline-block;
        margin-right: 10px;
    }

    #ItemPrice 
    {
        width: 80px;
    }

    .total-price
    {
        font-size: 16px;
        font-weight: bold;        
    }

</style>

<script>
    var itemsList2 = ");
#nullable restore
#line 115 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                Write(Html.Raw(Json.Serialize(ViewBag.itemslist2)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";

</script>
  

<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
<script type=""text/javascript"">

    var viewState = 
    {
        selectedId: null,
        selected_price:null,
        price_boxes :[],
        totalPrice:null
    };


    function createEventListener(dropdown, i_d) 
    {
        return function() {
            const input = i_d;
            const startIndex = input.indexOf('-') + 1;
            const integerPartString = input.substring(startIndex);

            const integerValue = parseInt(integerPartString, 10);
            var index = integerValue;
            Selected(dropdown, index);
        };
    }

    var dropdowns = document.querySelectorAll("".dynamic-dropdown""); 
    dropdowns.forEach(function(dropdown) 
    {
        var i_d = dropdown.id;
        dropdown.addEventListener(""change"", createEventListener(dropdown, i_d));
    });





    function createEventListeneramount(amounttext, amounttext_d) 
    {
        ret");
            WriteLiteral(@"urn function() 
        {
            const input = amounttext_d;
            const startIndex = input.indexOf('-') + 1;
            const integerPartString = input.substring(startIndex);

            const integerValue = parseInt(integerPartString, 10);
            var index = integerValue;
            var myDropdown= ""myDropdown-""+index;
            dropdown = document.getElementById(myDropdown);

            Update_Price(dropdown, index);
        };
    }

    var amounttexts = document.querySelectorAll("".Amount""); 
    amounttexts.forEach(function(amounttext) 
    {
        var amounttext_d = amounttext.id;

        amounttext.addEventListener(""change"", createEventListeneramount(amounttext, amounttext_d)); 
    });



    function update_totalprice() 
    {
        var price_boxes = document.querySelectorAll("".Price""); 

        price_boxes.forEach(function(pricebox) {
            var priceboxid = pricebox.id;

            box_price = document.getElementById(priceboxid).val");
            WriteLiteral(@"ue;

            viewState.price_boxes.push(parseFloat(box_price));
        });
    }


    function Selected(dropdown, index) {
        Update_Price(dropdown,index);
        update_totalprice();
        var total = 0 
        for (i = 0 ; i<viewState.price_boxes.length; i++)
        {
            total = total + viewState.price_boxes[i];
        }
        console.log(total);
        document.getElementById(""TotalPrice"").value = total.toString(); 
        viewState.price_boxes = [];
        viewState.totalPrice = total;

    }


    function Update_Price(dropdown,index) 
    {
        getselectedprice(dropdown,index)
        var amount = parseFloat(document.getElementById(""Amount-""+index).value);
        var Price = amount * viewState.selected_price; 
        document.getElementById('ItemPrice-' + index).value = Price.toFixed(2); 
        update_totalprice();

        var total = 0 
        for (i = 0 ; i<viewState.price_boxes.length; i++)
        {
            total = total ");
            WriteLiteral(@"+ parseInt(viewState.price_boxes[i]);
        }
        document.getElementById(""TotalPrice"").value = total.toString(); 
        viewState.price_boxes = [];
        viewState.totalPrice = total;

    }

    
    function getselectedprice(dropdown,index) 
    {

        var dropdown = dropdown;
        viewState.selectedId = dropdown.value;
        var targetItem = itemsList2.find(function(item) {
            return item.id === parseInt(viewState.selectedId);
        });
        viewState.selected_price = parseFloat(targetItem.itemprice);
    }






$(document).ready(function () 
    {
        $(""#SaveInvoiceButton"").click(function () 
        {
            update_totalprice();
            var total = 0 
            for (i = 0 ; i<viewState.price_boxes.length; i++)
            {
                total = total + parseInt(viewState.price_boxes[i]);
            }
            document.getElementById(""TotalPrice"").value = total.toString(); 
            viewState.price_boxes = [];");
            WriteLiteral("\r\n            viewState.totalPrice = total;\r\n\r\n            var totalprice =viewState.totalPrice\r\n            var customer = $(\"#Invoice_Customer\").val();\r\n            var id = ");
#nullable restore
#line 265 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                Write(ViewBag.i_nvoice_id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
            var invoiceDate = $(""#Invoice_InvoiceDate"").val();
            var invoiceItems = [];


            var tableBody = document.getElementById(""itemTable"").getElementsByTagName(""tbody"")[0];
            var rows = tableBody.getElementsByTagName(""tr"");
            var invoiceItems = [];

            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].getElementsByTagName(""td"");

                var item_Name = cells[0].getElementsByTagName(""select"")[0].options[cells[0].getElementsByTagName(""select"")[0].selectedIndex].text;
                var amount = parseFloat(cells[1].getElementsByTagName(""input"")[0].value);
                var item_price = parseFloat(cells[2].getElementsByTagName(""input"")[0].value);

                var invoiceItem = {
                    InvoiceId: id,
                    Amount: amount,
                    item_Name: item_Name,
                };

                invoiceItems.push(invoiceItem);
            }



            cons");
            WriteLiteral(@"ole.log(invoiceItems);

            $.ajax
            ({
                url: ""/Invoice/Edit"",
                type: ""POST"",
                data: 
                    {
                        totalprice: totalprice,
                        Customer: customer,
                        Id :");
#nullable restore
#line 302 "C:\Users\Ahmed\Desktop\.net\InvoiceApp\Views\Invoice\Edit.cshtml"
                       Write(ViewBag.i_nvoice_id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@",
                        InvoiceDate: invoiceDate,
                        invoiceItems: invoiceItems
                    },
                        success: function (response) {

                            window.location.href = ""http://localhost:5002/Invoice/Index"";
                        },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }


            });
        });
    });








</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<InvoiceApp.Models.viewmodel> Html { get; private set; }
    }
}
#pragma warning restore 1591
